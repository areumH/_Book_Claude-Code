name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Frontend Tests
      - name: 🎨 Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: 🔍 Frontend Lint Check
        run: |
          cd frontend
          npm run lint

      - name: 💅 Frontend Format Check
        run: |
          cd frontend  
          npm run format:check

      - name: 📝 Frontend Type Check
        run: |
          cd frontend
          npm run type-check

      - name: 🧪 Frontend Unit Tests
        run: |
          cd frontend
          npm run test

      # Backend Tests
      - name: 🔧 Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: 🔍 Backend Lint Check
        run: |
          cd backend
          npm run lint

      - name: 💅 Backend Format Check
        run: |
          cd backend
          npm run format:check

      - name: 🏗️ Backend Build Check
        run: |
          cd backend
          npm run build

      - name: 🗄️ Setup Database
        run: |
          cd backend
          cp .env.example .env
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> .env
          npm run db:push

      - name: 🧪 Backend Unit Tests
        run: |
          cd backend
          npm run test

      # Build Check
      - name: 🏗️ Frontend Build Check
        run: |
          cd frontend
          npm run build

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          directory: ./coverage
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Run security audit
        run: |
          cd frontend && npm audit --audit-level moderate
          cd ../backend && npm audit --audit-level moderate

  deploy-staging:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🏗️ Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🏗️ Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}