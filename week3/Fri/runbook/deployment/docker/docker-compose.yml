version: '3.8'

services:
  # Development environment
  app-dev:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DEBUG=app:*
    env_file:
      - ../config/.env.development
    volumes:
      - ../../src:/app/src:ro
      - ../../public:/app/public:ro
      - /app/node_modules
    depends_on:
      - db-dev
      - redis-dev
    networks:
      - runbook-dev
    restart: unless-stopped

  # Staging environment
  app-staging:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.prod
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=staging
    env_file:
      - ../config/.env.staging
    depends_on:
      - db-staging
      - redis-staging
    networks:
      - runbook-staging
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Production environment
  app-prod:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.prod
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - ../config/.env.production
    depends_on:
      - db-prod
      - redis-prod
    networks:
      - runbook-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
      replicas: 2

  # Development Database
  db-dev:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=runbook_dev
      - POSTGRES_USER=runbook
      - POSTGRES_PASSWORD=dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - runbook-dev
    restart: unless-stopped

  # Staging Database
  db-staging:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=runbook_staging
      - POSTGRES_USER=runbook
      - POSTGRES_PASSWORD=staging_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - runbook-staging
    restart: unless-stopped

  # Production Database
  db-prod:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=runbook_prod
      - POSTGRES_USER=runbook
      - POSTGRES_PASSWORD=prod_password
    ports:
      - "5434:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - runbook-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Development Redis
  redis-dev:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - runbook-dev
    restart: unless-stopped

  # Staging Redis
  redis-staging:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - runbook-staging
    restart: unless-stopped

  # Production Redis
  redis-prod:
    image: redis:7-alpine
    ports:
      - "6381:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - runbook-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx Load Balancer (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app-prod
    networks:
      - runbook-prod
    restart: unless-stopped
    profiles:
      - production

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - runbook-prod
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../config/grafana:/etc/grafana/provisioning:ro
    networks:
      - runbook-prod
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_dev_data:
  postgres_staging_data:
  postgres_prod_data:
  redis_dev_data:
  redis_staging_data:
  redis_prod_data:
  prometheus_data:
  grafana_data:

networks:
  runbook-dev:
    driver: bridge
  runbook-staging:
    driver: bridge
  runbook-prod:
    driver: bridge