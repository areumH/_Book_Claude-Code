name: 🔍 PR Quality Check

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: 📂 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      has-code: ${{ steps.changes.outputs.code }}
      has-docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            code:
              - 'src/**'
              - 'prisma/**'
              - 'public/**'
              - '*.json'
              - '*.js'
              - '*.ts'
              - '*.tsx'
              - 'Dockerfile*'
              - 'docker-compose*'
            docs:
              - '**.md'
              - 'docs/**'

  lint-and-format:
    name: 🔧 Lint & Format
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-code == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Run ESLint
        run: npm run lint

      - name: 🎨 Check Prettier formatting
        run: npm run format:check

  type-check:
    name: 🔍 Type Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-code == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Generate Prisma client
        run: npx prisma generate

      - name: 🔍 Run TypeScript check
        run: npm run type-check

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-code == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Generate Prisma client
        run: npx prisma generate

      - name: 🧪 Run unit tests
        run: npm run test -- --coverage --watchAll=false

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: false

  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-code == 'true'
    env:
      DATABASE_URL: file:./test.db
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: test-secret
      UPLOAD_DIR: ./public/uploads
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Generate Prisma client
        run: npx prisma generate

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Cache build artifacts
        uses: actions/cache/save@v4
        if: success()
        with:
          path: |
            .next
            node_modules/.cache
          key: build-cache-${{ github.sha }}

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [changes, build-test]
    if: needs.changes.outputs.has-code == 'true'
    timeout-minutes: 15
    env:
      DATABASE_URL: file:./test.db
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: test-secret
      UPLOAD_DIR: ./public/uploads
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps chromium

      - name: 📦 Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            .next
            node_modules/.cache
          key: build-cache-${{ github.sha }}

      - name: 🔧 Generate Prisma client
        run: npx prisma generate

      - name: 🗄️ Setup test database
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: 🏗️ Build if cache miss
        run: npm run build
        if: steps.cache.outputs.cache-hit != 'true'

      - name: 🎭 Run E2E tests
        run: npm run test:e2e

      - name: 📁 Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-code == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: cookshare:pr-${{ github.event.number }}

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-code == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Run security audit
        run: npm audit --audit-level moderate

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, unit-tests, build-test, e2e-tests, docker-build, security-scan]
    if: always()
    steps:
      - name: 📝 Create PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Lint & Format': '${{ needs.lint-and-format.result }}',
              'Type Check': '${{ needs.type-check.result }}',
              'Unit Tests': '${{ needs.unit-tests.result }}',
              'Build Test': '${{ needs.build-test.result }}',
              'E2E Tests': '${{ needs.e2e-tests.result }}',
              'Docker Build': '${{ needs.docker-build.result }}',
              'Security Scan': '${{ needs.security-scan.result }}'
            };

            const getEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '🚫';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            };

            let summary = '## 🔍 PR Quality Check Results\n\n';
            
            for (const [job, result] of Object.entries(results)) {
              summary += `${getEmoji(result)} **${job}**: ${result}\n`;
            }

            const allSuccess = Object.values(results).every(r => r === 'success' || r === 'skipped');
            
            if (allSuccess) {
              summary += '\n🎉 **All checks passed!** This PR is ready for review.';
            } else {
              summary += '\n⚠️ **Some checks failed.** Please fix the issues before merging.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });