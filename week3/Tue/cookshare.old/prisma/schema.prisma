// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  bio       String?
  role      String   @default("USER") // USER, ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipes  Recipe[]
  likes    Like[]
  comments Comment[]

  @@map("users")
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String?
  servings    Int      @default(4)
  prepTime    Int? // minutes
  cookTime    Int? // minutes
  difficulty  String   @default("Medium") // Easy, Medium, Hard
  category    String   @default("Main") // Breakfast, Lunch, Dinner, Snack, Dessert, Main, Side
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  ingredients Ingredient[]
  steps       Step[]
  likes       Like[]
  comments    Comment[]

  @@map("recipes")
}

model Ingredient {
  id       String @id @default(cuid())
  name     String
  amount   String
  unit     String?
  order    Int    @default(0)

  // Relations
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@map("ingredients")
}

model Step {
  id          String @id @default(cuid())
  instruction String
  order       Int    @default(0)
  image       String?

  // Relations
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@map("steps")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@unique([userId, recipeId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@map("comments")
}